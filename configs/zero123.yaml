name: "zero123"
tag: "${rmspace:${system.prompt_processor.prompt},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "single-image-datamodule"
data: # threestudio/data/image.py -> SingleImageDataModuleConfig
  image_path: ./load/images/hamburger_rgba.png
  height: 96
  width: 96
  default_elevation_deg: 0.0
  default_azimuth_deg: 0.0
  default_camera_distance: 1.2
  default_fovy_deg: 60.0
  batch_size: 1
  random_camera:  # threestudio/data/uncond.py -> RandomCameraDataModuleConfig
    height: 64
    width: 64
    eval_height: 256
    eval_width: 256
    batch_size: 1
    eval_batch_size: 1
    elevation_range: [-10, 90]
    azimuth_range: [-180, 180]
    camera_distance_range: [1, 1.5]
    fovy_range: [60., 60.]
    camera_perturb: 0.1
    center_perturb: 0.2
    up_perturb: 0.02
    light_position_perturb: 1.0
    light_distance_range: [0.8, 1.5]
    eval_elevation_deg: 0.
    eval_camera_distance: 1.2
    eval_fovy_deg: 60.
    light_sample_strategy: "dreamfusion"
    batch_uniform_azimuth: True

system_type: "zero123-system"
system:
  geometry_type: "implicit-volume"
  geometry:
    radius: 2.0
    normal_type: "analytic"

    # the density initialization proposed in the DreamFusion paper
    # does not work very well
    # density_bias: "blob_dreamfusion"
    # density_activation: exp
    # density_blob_scale: 5.
    # density_blob_std: 0.2

    # use Magic3D density initialization instead
    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5

    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals
    pos_encoding_config:
      otype: ProgressiveBandHashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096
      start_level: 8 # resolution ~200
      start_step: 2000
      update_steps: 500

  material_type: "diffuse-with-point-light-material"
  material:
    ambient_only_steps: 2001
    albedo_activation: sigmoid

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512

  prompt_processor_type: "zero123-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: ""
    prompt: ""

  guidance_type: "zero123-guidance"
  guidance:
    pretrained_model_name_or_path: "./load/zero123/105000.ckpt"
    pretrained_config: "./load/zero123/sd-objaverse-finetune-c_concat-256.yaml"
    cond_image_path: "./load/images/hamburger_rgba.png"
    cond_elevation_deg: 0.0     # ENSURE SAME AS data.default_elevation_deg
    cond_azimuth_deg: 0.0       # ENSURE SAME AS data.default_azimuth_deg
    cond_camera_distance: 1.2   # ENSURE SAME AS data.default_camera_distance
    guidance_scale: 5.
    min_step_percent: 0.02
    max_step_percent: 0.98

  freq:
    n_ref: 2
    ref_only_steps: 100

  loss:
    lambda_sds: 0.1
    lambda_rgb: 10.
    lambda_mask: 1.
    lambda_depth: 10.
    lambda_normal_smooth: 0.0
    lambda_orient: 0.0
    lambda_sparsity: 0.0
    lambda_opaque: 0.0
  optimizer:
    name: Adam
    args:
      lr: 0.01
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001

trainer:
  max_steps: 10000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 200
  enable_progress_bar: true
  precision: 16-mixed

checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}
